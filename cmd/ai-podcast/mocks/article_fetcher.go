// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"sync"
)

// ArticleFetcherMock is a mock implementation of main.ArticleFetcher.
//
//	func TestSomethingThatUsesArticleFetcher(t *testing.T) {
//
//		// make and configure a mocked main.ArticleFetcher
//		mockedArticleFetcher := &ArticleFetcherMock{
//			FetchFunc: func(url string) (string, string, error) {
//				panic("mock out the Fetch method")
//			},
//		}
//
//		// use mockedArticleFetcher in code that requires main.ArticleFetcher
//		// and then make assertions.
//
//	}
type ArticleFetcherMock struct {
	// FetchFunc mocks the Fetch method.
	FetchFunc func(url string) (string, string, error)

	// calls tracks calls to the methods.
	calls struct {
		// Fetch holds details about calls to the Fetch method.
		Fetch []struct {
			// URL is the url argument value.
			URL string
		}
	}
	lockFetch sync.RWMutex
}

// Fetch calls FetchFunc.
func (mock *ArticleFetcherMock) Fetch(url string) (string, string, error) {
	callInfo := struct {
		URL string
	}{
		URL: url,
	}
	mock.lockFetch.Lock()
	mock.calls.Fetch = append(mock.calls.Fetch, callInfo)
	mock.lockFetch.Unlock()
	if mock.FetchFunc == nil {
		var (
			contentOut string
			titleOut   string
			errOut     error
		)
		return contentOut, titleOut, errOut
	}
	return mock.FetchFunc(url)
}

// FetchCalls gets all the calls that were made to Fetch.
// Check the length with:
//
//	len(mockedArticleFetcher.FetchCalls())
func (mock *ArticleFetcherMock) FetchCalls() []struct {
	URL string
} {
	var calls []struct {
		URL string
	}
	mock.lockFetch.RLock()
	calls = mock.calls.Fetch
	mock.lockFetch.RUnlock()
	return calls
}
