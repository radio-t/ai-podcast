// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"os/exec"
	"sync"
)

// CommandRunnerMock is a mock implementation of main.CommandRunner.
//
//	func TestSomethingThatUsesCommandRunner(t *testing.T) {
//
//		// make and configure a mocked main.CommandRunner
//		mockedCommandRunner := &CommandRunnerMock{
//			GetAudioCommandFunc: func(filename string) (*exec.Cmd, error) {
//				panic("mock out the GetAudioCommand method")
//			},
//		}
//
//		// use mockedCommandRunner in code that requires main.CommandRunner
//		// and then make assertions.
//
//	}
type CommandRunnerMock struct {
	// GetAudioCommandFunc mocks the GetAudioCommand method.
	GetAudioCommandFunc func(filename string) (*exec.Cmd, error)

	// calls tracks calls to the methods.
	calls struct {
		// GetAudioCommand holds details about calls to the GetAudioCommand method.
		GetAudioCommand []struct {
			// Filename is the filename argument value.
			Filename string
		}
	}
	lockGetAudioCommand sync.RWMutex
}

// GetAudioCommand calls GetAudioCommandFunc.
func (mock *CommandRunnerMock) GetAudioCommand(filename string) (*exec.Cmd, error) {
	if mock.GetAudioCommandFunc == nil {
		panic("CommandRunnerMock.GetAudioCommandFunc: method is nil but CommandRunner.GetAudioCommand was just called")
	}
	callInfo := struct {
		Filename string
	}{
		Filename: filename,
	}
	mock.lockGetAudioCommand.Lock()
	mock.calls.GetAudioCommand = append(mock.calls.GetAudioCommand, callInfo)
	mock.lockGetAudioCommand.Unlock()
	return mock.GetAudioCommandFunc(filename)
}

// GetAudioCommandCalls gets all the calls that were made to GetAudioCommand.
// Check the length with:
//
//	len(mockedCommandRunner.GetAudioCommandCalls())
func (mock *CommandRunnerMock) GetAudioCommandCalls() []struct {
	Filename string
} {
	var calls []struct {
		Filename string
	}
	mock.lockGetAudioCommand.RLock()
	calls = mock.calls.GetAudioCommand
	mock.lockGetAudioCommand.RUnlock()
	return calls
}
